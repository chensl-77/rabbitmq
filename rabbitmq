1.“消息队列(Message Queue)”是在消息的传输过程中保存消息的容器
        生产者-->消息队列-->消费者
  作用：
   1).解耦   2).削峰   3).异步
  特点：
   1).可靠性。支持持久化，传输确认，发布确认等保证了MQ的可靠性。
   2).灵活的分发消息策略。这应该是RabbitMQ的一大特点。在消息进入MQ前由Exchange(交换机)进行路由消息。分发消息策略有：简单模式、工作队列模式、发布订阅模式、路由模式、通配符模式。
   3).支持集群。多台RabbitMQ服务器可以组成一个集群，形成一个逻辑Broker。
   4).多种协议。RabbitMQ支持多种消息队列协议，比如 STOMP、MQTT 等等。
   5).支持多种语言客户端。RabbitMQ几乎支持所有常用编程语言，包括 Java、.NET、Ruby 等等。
   6).可视化管理界面。RabbitMQ提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker。
   7).插件机制。RabbitMQ提供了许多插件，可以通过插件进行扩展，也可以编写自己的插件。
  组成部分：
   1).Broker：消息队列服务进程。此进程包括两个部分：Exchange和Queue。
   2).Exchange：消息队列交换机。按一定的规则将消息路由转发到某个队列。
   3).Queue：消息队列，存储消息的队列。
   4).Producer：消息生产者。生产方客户端将消息同交换机路由发送到队列中。
   5).Consumer：消息消费者。消费队列中存储的消息。
2.Exchange的四种类型：
   1).Direct Exchange(直连交换机)
   此交换机需要绑定一个队列，要求该消息与一个特定的路由键完全匹配。简单点说就是一对一的，点对点的发送。
   2).Fanout exchange
   需要将队列绑定到交换机上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。
   很像子网广播，每台子网内的主机都获得了一份复制的消息。简单点说就是发布订阅。
   3).Topic Exchange(主题交换机)
   使用通配符去匹配，路由到对应的队列。通配符有两种："*" 、 "#"。需要注意的是通配符前面必须要加上"."符号。
   4).Headers Exchange


注意：在修改一个已经创建的队列的参数的时候，先删除该队列

3.幂等性：对于一个资源，不管你请求一次还是请求多次，对该资源本身造成的影响应该是相同的，不能因为重复相同的请求而对该资源重复造成影响。
注意关注的是请求操作对资源本身造成的影响，而不是请求资源返回的结果

4.RabbitMQ中的幂等性：
 ① consumer接收到消息处理完成后，在给Broker返回ack途中网络中断，Broker未收到确认信息，
 根据RabbitMQ的重试补偿机制，则会把这条消息再重发给其他的消费者或等网络重连后再发送给该消费者，造成了消息的重复消费。
 ② 或者在开启生产者confirm模式下，生产者已经把消息发送到Broker，但在Broker回传ack确认时网络中断，
 生产者也会重新发送刚才的消息，造成Broker收到了重复的消息，最终将两条重复的消息发送到消费端，造成了消息的重复消费。
RabbitMQ要保证MQ的幂等性，就要保证消费者不会重复消费相同的消息：
全局唯一ID + Redis解决

5.当多个服务监听同一个队列时(work队列)：
竞争时默认轮循，也可根据每台服务器的消费速率来负载均衡
